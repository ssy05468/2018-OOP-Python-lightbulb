<svg viewBox="0 0 280 180" xmlns='http://www.w3.org/2000/svg'>
 
  <style> 
    .triangle{
        fill: #2040d0;
        stroke: #80c0ff;
        stroke-width: 1;
        stroke-miterlimit: 0;
    }
    .edge{
        fill: #4080e0;
        stroke-width: 1;
    }
    .bar-edge{
    	fill: #222;
    }
    .bar-top{
    	fill: #aaa;
    }
    .thread{
        stroke: #111;
        stroke-width: 0.5;
        stroke-opacity: 0.8;
    }
  </style>
 
  <g id='triangles' class='triangle'>
    <path id='triangle2'/>
    <path id='triangle1'/>
  </g>
  
  <path id='edge1' class='edge'/>
  <path id='edge2' class='edge'/>
  
  <path class='thread' id='thread2'/>
  
  <g class='bar'>
    <path id='bar-side1' class='bar-edge'/>
    <path id='bar-top'   class='bar-top' />
  </g>
  
  <line class='thread' x1='120.5' y1='55' x2='120.5' y2='20'/>
  <circle class='thread' cx='120.5' cy='20' r='1'/>

   
  <script type='text/javascript'><![CDATA[
	var shapes = []
	var perspective_c = 400;
	var width = 280 * 0.5;
	var height = 280 * 0.5;
	var first_triangle = 1;
        
    shapes[0] = new Shape3D('bar-side1', [80,80,220,220], [60,55,55,60], [100,100,100,100]);
    shapes[1] = new Shape3D('triangle1', [30,80,130], [160,80,160], [102,102,102]);
    shapes[2] = new Shape3D('triangle2', [30,80,130], [160,80,160], [98,98,98]);
    shapes[3] = new Shape3D('edge1', [30,30,80,80], [160,160,80,80], [98,102,102,98]);
    shapes[4] = new Shape3D('edge2', [130,130,80,80], [160,160,80,80], [98,102,102,98]);
    shapes[5] = new Shape3D('bar-top', [80,80,220,220], [55,55,55,55], [98,102,102,98]);
    shapes[6] = new Shape3D('thread2', [80,80], [55,80], [100,100]);

    animate_timeout = setInterval("animateShapes()", 25);
    //document.getElementsByTagName('svg')[0].addEventListener('mousedown', function() {window.clearInterval(animate_timeout);})
    
    function Shape3D(id, x, y, z) {
    	this.element = document.getElementById(id);
    	this.x = x;
    	this.y = y;
    	this.z = z;
	}
    	
    Shape3D.prototype.draw = function() {
		d = 'M';
		for(var i = 0; i < this.x.length; i++) {
		    perspective = perspective_c / (perspective_c + this.z[i]);
		    x = width + perspective * (this.x[i] - width);
		    y = height + perspective * (this.y[i] - height);
		    x = this.x[i];
		    y = this.y[i];
			d += ' ' + x + ' ' + y;
		}
		d += 'z';
        this.element.setAttributeNS(null, 'd', d);
	}
    	
    Shape3D.prototype.rotateAboutY = function(radians, centreX, centreZ) {
	    for(var i = 0; i < this.x.length; i++) {
	        x = this.x[i] - centreX;
	        z = this.z[i] - centreZ;
	        d = Math.sqrt(x*x + z*z);
	        theta  = Math.atan2(x, z) + radians;
	        this.x[i] = centreX + d * Math.sin(theta);
	        this.z[i] = centreZ + d * Math.cos(theta);
	    }
	}
    
    Shape3D.prototype.rotateAboutX = function(radians, centreY, centreZ) {
	    for(var i = 0; i < this.y.length; i++) {
	        y = this.y[i] - centreY;
	        z = this.z[i] - centreZ;
	        d = Math.sqrt(y*y + z*z);
	        theta  = Math.atan2(y, z) + radians;
	        this.y[i] = centreY + d * Math.sin(theta);
	        this.z[i] = centreZ + d * Math.cos(theta);
	    }
	}
    
    function rotateShapes() {
	    for (var i = 0; i < shapes.length; i++){
			shapes[i].rotateAboutY(0.01, 120, 100);
		}
		
	    for (var i = 1; i < 5; i++) {
			shapes[i].rotateAboutY(0.021, shapes[0].x[1], shapes[0].z[1]);
		}
    }
    
    function tiltShapes(radians) {
	    for(var i = 0; i < shapes.length; i++) {
	        shapes[i].rotateAboutX(radians, 100,100);
	    }
    }
        
	function moveTriangleToBottom(n) {	    
		var t1 = document.getElementById('triangle'+n);
		var t2 = t1.cloneNode(false);
		var parent = document.getElementById("triangles")

		parent.appendChild(t2);
		parent.removeChild(t1);
		shapes[n].element = t2;
		first_triangle = n;
	}
    
    function animateShapes() {
    	rotateShapes();
    	tiltShapes(0.2);
    	
        // Find triangle in front
        z1 = Math.max.apply(Math, shapes[1].z);
        z2 = Math.max.apply(Math, shapes[2].z);
        
        if (first_triangle === 1 && z2 > z1) {
        	moveTriangleToBottom(2);
        }
        else if (first_triangle === 2 && z1 > z2) {
        	moveTriangleToBottom(1);
        }
	    
        // Find edge in front
        z1 = Math.max.apply(Math, shapes[3].z);
        z2 = Math.max.apply(Math, shapes[4].z);
        
        if (z1 > z2) {
        	document.getElementById("edge2").setAttributeNS(null, 'visibility', 'hidden');
        	document.getElementById("edge1").setAttributeNS(null, 'visibility', 'visible');
        } else {
        	document.getElementById("edge1").setAttributeNS(null, 'visibility', 'hidden');
        	document.getElementById("edge2").setAttributeNS(null, 'visibility', 'visible');
        }
	       
	    for (var i = 0; i < shapes.length; i++){
	    	shapes[i].draw();
	    }    
    	tiltShapes(-0.2);
    }
    ]]></script> 
</svg>